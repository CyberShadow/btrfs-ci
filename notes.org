- [ ] TODO
  - [ ] Kernel build
    - [ ] Speed up
      - [ ] Exclude:
        - [ ] fs/ext4
        - [ ] fs/jbd2
        - [ ] drivers/acpi
        - [ ] drivers/gpu
        - [ ] drivers/sound
        - [ ] net/9p ?
        - [ ] net/ipv4 ?
- [-] Goals
  - [ ] Tasks
    - [ ] Build kernel
    - [ ] Build btrfs-progs
    - [ ] Run xfstests on kernel
    - [ ] Run btrfs-progs test suite (against kernel)
  - [-] Constraints
    - [ ] As fast as possible
    - [ ] Don't require root
      - [ ] How to build image?
        - fakeroot
          - works, but we need to run commands in the chroot/image to finish setup
        - fakeroot + UML
          - we can modify image after creation, but UML does not have user networking
        - fakeroot + fakechroot
          - mismatching libc errors when running on Travis
        - unshare
          - can't mix with fakeroot
          - can't mount sysfs (needed by some userspace tools) and have networking at the same time
        - proot
          - can't chroot inside proot
          - buggy filesystem emulation causes mkfs.ext4 to create broken image
        - give up and use Docker.
    - [ ] Environments
      - [ ] Travis CI
      - [ ] GitLab CI ?
    - [X] UML?
      - We will be using UML because neither Travis nor GitLab CI provide KVM.
      - UML is slower than KVM, but much faster than qemu without KVM.
- [ ] Don't cache all build IDs, just the last (delete old version on mismatch)
- [ ] Add coverage analysis
  - [ ] Add badge
  - [ ] Use a service to generate a browseable coverage report
  - [ ] Kernel code too?

-------------------------------------------------------------------------------------------------------------------------------------------------------

Goals:
- btrfs-progs test suite and xfstests running on btrfs-progs and linux kernel built on master
  - dep: build kernel
    - (no deps)
  - dep: build btrfs-progs
    - option 1: build in Docker
    - option 2: build in VM (before running test suite)
      - dep: image
  - dep: build image
    1. unpack rootfs
       - dep: rootfs
    2. install packages
       - dep: root (need to build in/with Docker)
    3. build the image
       - dep: Docker or btrfs-progs
